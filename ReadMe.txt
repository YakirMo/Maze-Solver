Maze Solver:

This program is solving given matrixes by finding the most 'cost-effective' path,
from a given starting point to a given endpoint.

The program works by those steps:

1. Recieve and create connections with multiple clients on seperate threads, with a ParallelServer object and define the given problem.
    a.  Each connected client is sending a problem (represented by Isearchable interface) which is handled by a ClientHandler object.
    b.  The HandleClient object defines and sets the problem (to the right format).
2. Solve problem / Retrieve solution.
    a. After a problem is defined, the HandleClient object checks if the problem was already solved.
        If it was solved in the past, it will load it from a saved file (from disk) and send it back to the right client.
    b. If the problem was never solved, the HandleClient object will call a Solver (which is defined to be a type of 'Search'- object adapter).
        used an Object-Adapter class ('Search') in order to connect between a 'general' Solver to a 'Searcher' 
        (an interface or type that represents algorithms that solve 'searchable' problems).
    c. An algorithm that was chosen in advance (because of its' efficiency) and initialiized in the main ('ParallelServer'->'bootPar'),
       will be the Solver / Searcher to generate a solution and return it.
3. After a solution was generated by the algorithm, it will be returned to the HandleClient object which will save the solution, in case the same problem will be recieved.
    The HandleClient object, after saving the solution, will send it back to the client who sent the original problem.
    

// More about the design patterns
Solver - an interface or type representing objects that solves problems. In our case, the problems are 'Searchables', and the 'Solvers' are 'Searchers'.
Searchables - the given problems. They are called Searchables because those problems are defined as Searching problems.
Searchers - the algorithms that solves the given problems (or 'Searchables'). They are called Searchers because they solve problems by Searching (in our case - the most 'profitable' path).
Search - an Object-Adapter class. This design pattern is used in order to seperate between a Solver, that might solve a variety of problems, and A Searcher, which specifically solves 'Searchable' problems.
